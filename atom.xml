<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhoujw</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoujw.github.io/"/>
  <updated>2018-10-16T07:42:06.670Z</updated>
  <id>http://zhoujw.github.io/</id>
  
  <author>
    <name>zhoujw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一行代码</title>
    <link href="http://zhoujw.github.io/2018/10/16/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    <id>http://zhoujw.github.io/2018/10/16/第一行代码/</id>
    <published>2018-10-16T07:40:40.000Z</published>
    <updated>2018-10-16T07:42:06.670Z</updated>
    
    <content type="html"><![CDATA[<p>Git 讲解</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h1><p>git config –global user.name “tony”<br>git config –global user.email “<a href="mailto:tony@gmail.com" target="_blank" rel="noopener">tony@gmail.com</a>“</p><p>git init</p><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>git add build.gradle //添加单个文件<br>git add app  // 添加整个目录<br>git add . //添加所有文件</p><p>git commit -m “first commit”</p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>在文件.gitignore中添加文件名<br>/build<br>/src/test</p><p>git add .<br>git commit -m “ingore file”</p><h2 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h2><p>git status 提示文件变化<br>git diff 看到文件的更改内容</p><h2 id="撤销未提交的内容"><a href="#撤销未提交的内容" class="headerlink" title="撤销未提交的内容"></a>撤销未提交的内容</h2><p>未使用add添加到暂存区的： git checkout app/src/main/java/com/example/providertest/MainActivity.java<br>已添加到暂存区的： git reset app/src/main/java/com/example/providertest/MainActivity.java</p><h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><p>git log</p><h1 id="手机多媒体"><a href="#手机多媒体" class="headerlink" title="手机多媒体"></a>手机多媒体</h1><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>NotificationManger对通知进行管理。<br>NotificationManger manager = (NotificationManger)getSystemService(Context.NOTIFICATION_SERVICE);</p><p>Notification notification = new NotificationCompat.Builder(context).builder();</p><p>##调用摄像头拍照<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Uri imageUri;</span><br><span class="line">// 创建File对象，用于存储拍照后的照片</span><br><span class="line">File outputImage = new File(getExternalCacheDir, &quot;output.ipg&quot;);</span><br><span class="line">// </span><br><span class="line">outputImage.createNewFile();</span><br><span class="line">// </span><br><span class="line">if (Build.VERSION_SDK_INT &gt;= 24)&#123;</span><br><span class="line">imageUri = FileProvider.getUriForFile(MainActivity.this, &quot;com.example.cameraalbumtest.fileprovider&quot;,outputImage);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">imageUri = uri.fromFile(outputImage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Intent intent = new Intent(&quot;android.media.action.IMAGE_CAPTURE&quot;);</span><br><span class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class="line">startActivityForResult(intent, TAKE_PHOTO);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 讲解&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h1 id=&quot;创建代码仓库&quot;&gt;&lt;a href=&quot;#创建代码仓库&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="android" scheme="http://zhoujw.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>retrofit2</title>
    <link href="http://zhoujw.github.io/2018/07/30/retrofit2/"/>
    <id>http://zhoujw.github.io/2018/07/30/retrofit2/</id>
    <published>2018-07-30T02:31:38.000Z</published>
    <updated>2018-07-30T08:03:20.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Retrofit2"><a href="#Retrofit2" class="headerlink" title="Retrofit2"></a>Retrofit2</h1><p>Retrofit is a type-safe HTTP client for Android and Java</p><h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>Retrofit turns your HTTP API into a Java interface<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface GitHubService&#123;</span><br><span class="line">@GET(&quot;users/&#123;user&#125;/repos&quot;)</span><br><span class="line">Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The retrofit class generate an implementation of the GitHubService interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.baseUrl(&quot;https://api.github.com/&quot;)</span><br><span class="line">.build()</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><p>Each Call from the created GitHubService can make a synchronous or asynchronous HTTP<br>request to the remote webserver.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(&quot;octocat&quot;);</span><br></pre></td></tr></table></figure><p>Use annotation to describe the HTTP request:</p><ul><li>URL parameter replacement and query parameter support</li><li>Object conversion to request body(e.g.,JSON, protocol buffers)</li><li>Multipart request body and file upload</li></ul><h2 id="API-Declaration"><a href="#API-Declaration" class="headerlink" title="API Declaration"></a>API Declaration</h2><p>Annotations on the interface methods and its parameters indicate how a request will be handled.</p><h4 id="REQUEST-METHOD"><a href="#REQUEST-METHOD" class="headerlink" title="REQUEST METHOD"></a>REQUEST METHOD</h4><p>Every method must have an HTTP annotation that provides the request method and relative URL/<br>There are five built-in annotations:<br>GET,POST,PUT,DELETE, and HEAD. The relative URL of the resource is specified in the annotation.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;users/list&quot;)</span><br></pre></td></tr></table></figure></p><p>You can also specify query parameters in the URL.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;users/list?sort=desc&quot;)</span><br></pre></td></tr></table></figure></p><h4 id="URL-MANIPULATION"><a href="#URL-MANIPULATION" class="headerlink" title="URL MANIPULATION"></a>URL MANIPULATION</h4><p>A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }. A corresponding parameter must be annotated with @Path using the same string.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;group/&#123;id&#125;users&quot;)</span><br><span class="line">Call&lt;list&lt;User&gt;&gt; grouplist(@Path(&quot;id&quot;) int groupId);</span><br></pre></td></tr></table></figure></p><p>Query parameters can also be added<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</span><br><span class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;)) int groupId, @Query(&quot;sort&quot;) String sort);</span><br></pre></td></tr></table></figure></p><p>For complex query parameter combinations a Map can be used.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;users/new&quot;)</span><br><span class="line">Call&lt;User&gt; createUser(@Body User user);</span><br></pre></td></tr></table></figure></p><p>The object will also be converted using a converter specified on the Retrofit instance.<br>If no converter is added. only RequestBody can be used.</p><h4 id="FORM-ENCODE-AND-MULTIPART"><a href="#FORM-ENCODE-AND-MULTIPART" class="headerlink" title="FORM ENCODE AND MULTIPART"></a>FORM ENCODE AND MULTIPART</h4><p>Methods can also be declared to send form-encoded and multipart data.<br>Form-encoded data is sent when @FormUrlEncoded is present on the method. Each key-value pair is annotated with @Field containing the name and the object prociding the value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@FormUrlEncoded</span><br><span class="line">@POST(&quot;user/edit&quot;)</span><br><span class="line">Call&lt;User&gt; updateUder(@Field(&quot;first_name&quot;) String first, @Field(&quot;last_name&quot;) String last);</span><br></pre></td></tr></table></figure><p>Multipart requests are used when @Multipart is present on the method. Parts are declared using the @Part annotation.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Mulitpart</span><br><span class="line">@PUT(&quot;user/photo&quot;)</span><br><span class="line">Call&lt;User&gt; updateUser(@Part(&quot;photo&quot;) RequestBody photo, @part(&quot;description&quot;) RequestBody description);</span><br></pre></td></tr></table></figure></p><p>Multipart parts use one of Retrofit’s converters or they can implement RequestBody to handle their own serialization.</p><h4 id="HEADER-MANIPULATION"><a href="#HEADER-MANIPULATION" class="headerlink" title="HEADER MANIPULATION"></a>HEADER MANIPULATION</h4><p>You can set static headers for a method using the @Headers annotation.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Headers(&quot;Cache-Control: max-age=64000&quot;)</span><br><span class="line">@GET(&quot;Widget/list&quot;)</span><br><span class="line">Call&lt;User&gt; getUser(@Path(&quot;username&quot;) String username);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Headers(&#123;</span><br><span class="line">&quot;Accept : applocation/vnd.github.v3.full+json&quot;,</span><br><span class="line">&quot;User-Agent : Retrofit-Sample-App&quot;</span><br><span class="line">&#125;)</span><br><span class="line">@GET(&quot;users/&#123;username&#125;&quot;)</span><br><span class="line">Call&lt;User&gt; getUser(@Path(&quot;username&quot;) String username);</span><br></pre></td></tr></table></figure><p>Noted that headers do not overwrite each other. All headers with the same name will be included in the request.<br>A request Headers can be updated dynamically using the @Header annotation. A corresponding parameter must be provided to the @Header. If the value is null,<br>the header will be omitted. Otherwise, toString will be called on the value, and the result used.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;user&quot;)</span><br><span class="line">Call&lt;User&gt; getUser(@Header(&quot;Authorization&quot;) String authorization)</span><br></pre></td></tr></table></figure></p><p>Similar to query parameters, for complex header combinations, a Map can be used.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GET(&quot;user&quot;)</span><br><span class="line">Call&lt;User&gt; getUser(@HeaderMap Map&lt;String,String&gt; headers)</span><br></pre></td></tr></table></figure></p><p>Headers that need to be added to every request can be specified using an OkHttp interceptor.</p><h4 id="SYNCHRONOUS-VS-ASYNCHRONOUS"><a href="#SYNCHRONOUS-VS-ASYNCHRONOUS" class="headerlink" title="SYNCHRONOUS VS. ASYNCHRONOUS"></a>SYNCHRONOUS VS. ASYNCHRONOUS</h4><p>Call instances can be executed either synchronously or asynchronously. Each instandce can be only be used once, but calling clone() will create a new instance that can be used.<br>On Android, callbacks will be executed on the main thread. On the JVM, callbacks will happen on the same thread that executed the HTTP request.</p><h2 id="Retrofit-Configuration"><a href="#Retrofit-Configuration" class="headerlink" title="Retrofit Configuration"></a>Retrofit Configuration</h2><p>Retrofits is the class through which your API interfaces are turned into callable objects. By default, Retrofit will give you sane defaults for your plantform but it allows for customization.</p><h4 id="converters"><a href="#converters" class="headerlink" title="converters"></a>converters</h4><p>By default, Retrofit can only deserialize HTTP bodies into OkHttp’s ResponseBody<br>type and it can only accept its RequestBody type for @Body.</p><p>Converters can be added to support other types. Six sibling modules adapt popular serialization libraries for your convenience.</p><ul><li>Gson</li><li>Jackson</li><li>Moshi</li><li>Protobuf</li><li>Wire</li><li>Simple XML</li><li>Scalars</li></ul><p>Here’s an example of using the GsonConverterFactory class to generate an inplementation of the GitHubService interface which uses Gson for its deserialization.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">.baseUrl(&quot;http://api.github.com&quot;)</span><br><span class="line">.addCoverterFactory(GsonConverterFactory.create())</span><br><span class="line">.build();</span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class)</span><br></pre></td></tr></table></figure></p><h4 id="Custom-converters"><a href="#Custom-converters" class="headerlink" title="Custom converters"></a>Custom converters</h4><p>If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box(e.g. YAML, txt. custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the Converter.Factory class and pass in an instance when building your adapter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Retrofit2&quot;&gt;&lt;a href=&quot;#Retrofit2&quot; class=&quot;headerlink&quot; title=&quot;Retrofit2&quot;&gt;&lt;/a&gt;Retrofit2&lt;/h1&gt;&lt;p&gt;Retrofit is a type-safe HTTP client for An
      
    
    </summary>
    
    
      <category term="android retrofit network" scheme="http://zhoujw.github.io/tags/android-retrofit-network/"/>
    
  </entry>
  
  <entry>
    <title>linux-note</title>
    <link href="http://zhoujw.github.io/2018/07/13/linux-note/"/>
    <id>http://zhoujw.github.io/2018/07/13/linux-note/</id>
    <published>2018-07-13T09:58:59.000Z</published>
    <updated>2018-07-13T09:59:42.350Z</updated>
    
    <content type="html"><![CDATA[<p>#Linux Note</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Linux Note&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git Note</title>
    <link href="http://zhoujw.github.io/2018/07/12/Git%20Note/"/>
    <id>http://zhoujw.github.io/2018/07/12/Git Note/</id>
    <published>2018-07-12T09:58:28.000Z</published>
    <updated>2018-07-13T09:48:40.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Note"><a href="#Git-Note" class="headerlink" title="Git Note"></a>Git Note</h1><h2 id="创建Git版本库"><a href="#创建Git版本库" class="headerlink" title="创建Git版本库"></a>创建Git版本库</h2><ul><li>mkdir learngit [创建文件夹learnGit]</li><li>cd learngit  [跳转到文件夹learnGit]</li><li>pwd [显示当前路径：Users/XXX/learngit]</li><li>git init [init git库]</li></ul><h2 id="将文件放入Git仓库"><a href="#将文件放入Git仓库" class="headerlink" title="将文件放入Git仓库"></a>将文件放入Git仓库</h2><ul><li>git add [将文件加入仓库] </li><li>git commit [提交改动到仓库] <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">'wrote a readme file'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取仓库当前的状态"><a href="#获取仓库当前的状态" class="headerlink" title="获取仓库当前的状态"></a>获取仓库当前的状态</h2><ul><li>git status</li></ul><h2 id="版本比较"><a href="#版本比较" class="headerlink" title="版本比较"></a>版本比较</h2><p>git diff<br>提交修改同样需要两步</p><ul><li>git add readme.txt</li><li>git commit -m ‘add XXX’</li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>git log</p><p>显示从最近到最远的提交日志 添加–pretty=online参数，精简输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ //回退到上一个版本</span><br><span class="line">git reset --hard HEAD^^ //上上个版本</span><br><span class="line">git reset --hard HEAD~100 //往前100个版本</span><br><span class="line">git reset --hard 1094a //恢复到被还原的版本</span><br></pre></td></tr></table></figure></p><p>需要找到需要被还原的版本号：比如 1094a….<br>Git版本回退，是将只想当前版本的HEAD指针，指向上一个版本</p><p>git reflog 记录每一次命令<br>找到你需要的版本号即可会退到此版本： git reset –hard commit_id</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区 : 你在电脑中的目录 learngit</p><h3 id="版本库（repository）"><a href="#版本库（repository）" class="headerlink" title="版本库（repository）"></a>版本库（repository）</h3><p>工作区中含有一个隐藏目录 .git, 这个就是Git的版本库<br>版本库中含有很多东西，其中最重要的是stage（或者叫index）的暂存区，<br>还用Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD</p><h3 id="缓存区"><a href="#缓存区" class="headerlink" title="缓存区"></a>缓存区</h3><p>将文件添加到版本库是两步执行：</p><ul><li>git add 实际就是将文件修改添加到暂存区</li><li>git commit 实际上就是把暂存区的所有内容提交到当前分支<br>简单理解为需要提交的文件修改放到暂存区，然后一次性提交暂存区的所有修改<h3 id="实践："><a href="#实践：" class="headerlink" title="实践："></a>实践：</h3></li><li>先修改gitNote,再添加一个LICENSE的文件.</li><li>查看git status。</li><li>使用git add LICENSE后查看git status。</li><li>然后使用git commit。</li></ul><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>git比其他版本控制系统设计的优秀，因为Git跟踪管理的是修改，而非文件。<br>可以做个测试：</p><ul><li>对GitNote.md做一个修改，新加内容，然后添加.</li><li>再做一次修改</li><li>提交，并查看状态<br>发现此时第二次的修改没有被提交，显示Changes not staged for commit<br>第二次的修改未被放入暂存区，commit只提交stage中的修改，所以第二次的修改未被提交。</li></ul><p>总结：git commit 只会提交已经add到暂存区的修改，没有添加是不会被提交的</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><ul><li>场景1：乱改了工作区某个文件，想直接丢弃工作区修改使用 git checkout – file</li><li>场景2：乱改了工作区某个文件，并add到了暂存区，想要丢弃分两步，第一步使用git reset HEAD file，回到场景1， 再git checkout – file</li><li>场景3：已经提交了不合适的修改，想要撤回版本，(前提是未推送到远程版本库)参考版本回退 git reset -hard HEAD^</li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>Git中，删除也是一种修改操作，新添加一个新文件test.txt,add then commit,then rm test.txt<br>使用git status 查看，显示文件被删除<br>此时有两种选择：</p><ul><li>删除 git rm test.txt     git commit -m ‘remove test.txt’ (手动删除，再add change to stage, 效果和git rm 是一样的)</li><li>恢复 git checkout – test.txt</li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li>在用户目录下.ssh 创建ssh key<br>$ ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“<br>将id_rsa.pub内容复制到GitHub中的ssh</li></ul><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><ul><li>在GitHub新创建一个仓库</li><li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:XXX/learngit.git</li><li>git push -u origin master 以后每次本地提交后，只需要使用下面的命令即可推送最新修改</li><li>git push origin master</li></ul><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>假设从零开发，最好是先创建远程库，然后从远程库克隆</p><ul><li>首先在GitHub创建一个新的仓库，gitskills，勾选创建readme.md.</li><li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/gitskills.git</li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">git checkout  add -b parameter mean create branch and switch to new branch</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><ul><li>git branch查看当前分支：</li><li>git branch： 会列出所有分支，在当前分支前标记*</li><li>git checkout master :切换到master</li><li>git merge dev ： merge Dev 到 master</li><li>git branch -d dev</li></ul><ul><li>查看分支：git branch</li><li>创建分支：git branch <name></name></li><li>切换分支：git checkout <name></name></li><li>创建切换分支：git checkout -b <name></name></li><li>合并某分支到当前分支：git merge <name></name></li><li>删除分支：git branch -d <name></name></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>准备一个新的分支feature1分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">git branch feature1 git checkout feature1</span><br><span class="line">git checkout -b feature1</span><br><span class="line">// 修改readme.md</span><br><span class="line"></span><br><span class="line">// 在分支feature1上提交</span><br><span class="line">git add readme.md  git commit -m &apos;modify readme in feature1&apos;</span><br><span class="line"></span><br><span class="line">// 切换到master</span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">// Git会提示我们当前master的分支比远程的master分支要超前一个提交</span><br><span class="line"></span><br><span class="line">// 在master分支上修改readme.md</span><br><span class="line"></span><br><span class="line">// 提交</span><br><span class="line"></span><br><span class="line">git add readme.md  </span><br><span class="line">git commit -m &apos;modify readme in master&apos;</span><br><span class="line"></span><br><span class="line">// 合并两个分支</span><br><span class="line"></span><br><span class="line">git merge feature</span><br><span class="line"></span><br><span class="line">// 产生冲突，需要手动解决。git status 也可以告诉我们冲突的文件：</span><br><span class="line"></span><br><span class="line">// 查看readme的内容，解决冲突，提交</span><br><span class="line">git add readme.md git commit -m &apos;conflict fixed&apos;</span><br><span class="line"></span><br><span class="line">// 删除分支feature1</span><br><span class="line">git branch -d feature1</span><br></pre></td></tr></table></figure></p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>–no-ff方式的merge</p><p>git merge –no-ff -m ‘merge with no-off’ dev</p><p>总结：<br>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>当接到修复任务的时候，创建一个分支issue-101，但是当前正在Dev上进行的工作还没有提交，且目前只进行到一半还没有办法提交。<br>使用stash功能，可以将当前工作现场存储起来，等待以后恢复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- git stash list // 查看所有的stash</span><br><span class="line">- git stash apply // 恢复/git stash drop删除</span><br><span class="line">- git stash pop // 恢复并删除</span><br><span class="line">- git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p><h2 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h2><ul><li>创建一个新的分支进行工作 git checkout -b feature</li><li>开发完毕后，提交代码 </li><li>切回dev,准备合并 git checkout dev</li><li>取消分支开发。git branch -d feature 销毁失败，提示分支没有被合并</li><li>强行删除 git branch -D feature</li></ul><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对于起来了，并且，仓库的默认名为origin</p><p>查看远程仓库信息：git remote</p><p>详细信息：git remote -v</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>推送分支，就是把该分支的所有本地提交推送到远程库。要制定本地分支。这样，Git就把该分支推送到远程库对应的远程分支上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure></p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>多人协作时，大家都会网master和Dev分支上推送各自的修改</p><p>clone远程库时，默认情况下只能看到本地的master分支。使用git branch 查看</p><p>如果需要在Dev分支上开发，就必须创建远程origin的dev分支到本地，使用 git checkout -b dev origin/dev 创建本地分支</p><h3 id="push冲突"><a href="#push冲突" class="headerlink" title="push冲突"></a>push冲突</h3><ul><li>假设你和别人都往origin/dev分支推送了他的提交，且修改了相同的文件，并试图推送</li><li>推送失败，因为你的推送和别人有冲突，此时Git会提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送</li><li>假如git pull 也失败了，原因是没有指定本地dev与远程分支origin/dev的链接，根据提示设置dev 和 origin/dev的链接： git branch –set-upstream-to=origin/dev dev<br>再 git pull,然后手动合并冲突，提交，push</li></ul><p>因此多人协作工作模式通常是：</p><ul><li>首先，可以试图用git push origin <branch-name>推送自己的修改；</branch-name></li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！</branch-name></li><li>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。</span><br></pre></td></tr></table></figure></li></ul><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git tag &lt;name&gt;</span><br></pre></td></tr></table></figure><p>查看标签 git tag</p><p>标签对应的是最新提交的commit，如果要为以前的commit打tag,需要找到对应的commit id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.9 f52c833</span><br></pre></td></tr></table></figure></p><p>创建带有说明的标签 -a 指定标签名，-m指定说明文字<br>git tag -a v0.1 -m ‘version 0.1 released’ 1094adb</p><p>小结</p><ul><li>git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</tagname></li><li>git tag -a <tagname> -m “blablabla…”可以指定标签信息；</tagname></li><li>git tag可以查看所有标签。</li><li>git push origin <tagname>可以推送一个本地标签；</tagname></li><li>git push origin –tags可以推送全部未推送过的本地标签；</li><li>git tag -d <tagname>可以删除一个本地标签；</tagname></li><li>git push origin :refs/tags/<tagname>可以删除一个远程标签。</tagname></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-Note&quot;&gt;&lt;a href=&quot;#Git-Note&quot; class=&quot;headerlink&quot; title=&quot;Git Note&quot;&gt;&lt;/a&gt;Git Note&lt;/h1&gt;&lt;h2 id=&quot;创建Git版本库&quot;&gt;&lt;a href=&quot;#创建Git版本库&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhoujw.github.io/2018/07/11/hello-world/"/>
    <id>http://zhoujw.github.io/2018/07/11/hello-world/</id>
    <published>2018-07-11T09:30:36.528Z</published>
    <updated>2018-07-11T09:30:36.529Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
